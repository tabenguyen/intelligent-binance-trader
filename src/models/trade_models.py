"""
Trading-related data models.
"""

from dataclasses import dataclass
from datetime import datetime
from typing import Optional, Dict, Any
from enum import Enum


class TradeDirection(Enum):
    """Trade direction enumeration."""
    BUY = "BUY"
    SELL = "SELL"


class TradeStatus(Enum):
    """Trade status enumeration."""
    PENDING = "PENDING"
    EXECUTED = "EXECUTED"
    CANCELLED = "CANCELLED"
    FILLED = "FILLED"
    STOP_LOSS = "STOP_LOSS"
    TAKE_PROFIT = "TAKE_PROFIT"


class OrderType(Enum):
    """Order type enumeration."""
    MARKET = "MARKET"
    LIMIT = "LIMIT"
    OCO = "OCO"
    STOP_LOSS = "STOP_LOSS"
    TAKE_PROFIT = "TAKE_PROFIT"


@dataclass
class TradingSignal:
    """Represents a trading signal generated by a strategy."""
    symbol: str
    direction: TradeDirection
    price: float
    confidence: float
    timestamp: datetime
    strategy_name: str
    indicators: Dict[str, Any]
    core_conditions_count: int = 0
    stop_loss: Optional[float] = None
    take_profit: Optional[float] = None
    
    
@dataclass
class Position:
    """Represents an active trading position."""
    symbol: str
    quantity: float
    entry_price: float
    current_price: float
    entry_time: datetime
    stop_loss: Optional[float] = None
    take_profit: Optional[float] = None
    trailing_stop: Optional[float] = None
    oco_order_id: Optional[str] = None  # Track OCO order for exit management
    
    @property
    def unrealized_pnl(self) -> float:
        """Calculate unrealized P&L."""
        return (self.current_price - self.entry_price) * self.quantity
    
    @property
    def unrealized_pnl_percentage(self) -> float:
        """Calculate unrealized P&L percentage."""
        return ((self.current_price - self.entry_price) / self.entry_price) * 100


@dataclass
class Trade:
    """Represents a completed trade."""
    id: str
    symbol: str
    direction: TradeDirection
    quantity: float
    entry_price: float
    exit_price: Optional[float]
    entry_time: datetime
    exit_time: Optional[datetime]
    status: TradeStatus
    pnl: Optional[float] = None
    commission: Optional[float] = None
    strategy_name: Optional[str] = None
    stop_loss: Optional[float] = None
    take_profit: Optional[float] = None
    
    @property
    def is_profitable(self) -> bool:
        """Check if the trade is profitable."""
        return self.pnl is not None and self.pnl > 0
    
    @property
    def stop_loss_percentage(self) -> Optional[float]:
        """Calculate stop loss percentage from entry price."""
        if self.stop_loss and self.entry_price:
            return ((self.stop_loss - self.entry_price) / self.entry_price) * 100
        return None
    
    @property
    def take_profit_percentage(self) -> Optional[float]:
        """Calculate take profit percentage from entry price."""
        if self.take_profit and self.entry_price:
            return ((self.take_profit - self.entry_price) / self.entry_price) * 100
        return None


@dataclass
class OrderResult:
    """Represents the result of an order execution."""
    success: bool
    order_id: Optional[str]
    filled_quantity: float
    filled_price: float
    commission: float
    error_message: Optional[str] = None
    raw_response: Optional[Dict[str, Any]] = None
