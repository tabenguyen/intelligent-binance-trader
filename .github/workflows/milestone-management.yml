name: Milestone Management

on:
  issues:
    types: [opened, edited, closed, reopened]
  pull_request:
    types: [opened, edited, closed, reopened, merged]
  schedule:
    # Run weekly milestone review on Mondays at 9 AM UTC
    - cron: "0 9 * * 1"
  workflow_dispatch:
    inputs:
      action:
        description: "Milestone action to perform"
        required: true
        default: "review"
        type: choice
        options:
          - review
          - create_next
          - cleanup

jobs:
  milestone-review:
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'review')

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Review milestone progress
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;

            // Get all open milestones
            const milestones = await github.rest.issues.listMilestones({
              owner,
              repo,
              state: 'open'
            });

            for (const milestone of milestones.data) {
              const issues = await github.rest.issues.listForRepo({
                owner,
                repo,
                milestone: milestone.number,
                state: 'all'
              });
              
              const totalIssues = issues.data.length;
              const closedIssues = issues.data.filter(issue => issue.state === 'closed').length;
              const openIssues = totalIssues - closedIssues;
              const progress = totalIssues > 0 ? Math.round((closedIssues / totalIssues) * 100) : 0;
              
              // Check if milestone is overdue
              const dueDate = new Date(milestone.due_on);
              const now = new Date();
              const isOverdue = dueDate < now && openIssues > 0;
              
              // Create milestone progress comment
              const progressReport = `
              ## 📊 Milestone Progress Report: ${milestone.title}
              
              **Progress:** ${progress}% complete (${closedIssues}/${totalIssues} issues)
              **Due Date:** ${milestone.due_on ? new Date(milestone.due_on).toDateString() : 'No due date'}
              **Status:** ${isOverdue ? '⚠️ OVERDUE' : progress === 100 ? '✅ COMPLETE' : '🚧 IN PROGRESS'}
              
              **Remaining Issues:** ${openIssues}
              
              ${isOverdue ? '> **Action Required:** This milestone is past due and needs attention.' : ''}
              ${progress >= 90 ? '> **Near Completion:** Consider preparing next milestone or release.' : ''}
              `;
              
              console.log(progressReport);
              
              // If milestone is complete, close it
              if (progress === 100 && milestone.state === 'open') {
                await github.rest.issues.updateMilestone({
                  owner,
                  repo,
                  milestone_number: milestone.number,
                  state: 'closed'
                });
                console.log(`✅ Closed completed milestone: ${milestone.title}`);
              }
            }

  auto-milestone-assignment:
    runs-on: ubuntu-latest
    if: github.event_name == 'issues' && github.event.action == 'opened'

    steps:
      - name: Auto-assign to current milestone
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const issueNumber = context.payload.issue.number;
            const labels = context.payload.issue.labels.map(label => label.name);

            // Get current active milestone (earliest due date that's not closed)
            const milestones = await github.rest.issues.listMilestones({
              owner,
              repo,
              state: 'open',
              sort: 'due_on',
              direction: 'asc'
            });

            if (milestones.data.length === 0) return;

            const currentMilestone = milestones.data[0];

            // Auto-assign critical and high priority issues to current milestone
            if (labels.includes('priority/critical') || labels.includes('priority/high')) {
              await github.rest.issues.update({
                owner,
                repo,
                issue_number: issueNumber,
                milestone: currentMilestone.number
              });
              
              console.log(`Assigned issue #${issueNumber} to milestone: ${currentMilestone.title}`);
            }

  create-next-milestone:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'create_next'

    steps:
      - name: Create next quarterly milestone
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;

            // Calculate next quarter
            const now = new Date();
            const currentQuarter = Math.floor((now.getMonth() + 3) / 3);
            const currentYear = now.getFullYear();

            let nextQuarter = currentQuarter + 1;
            let nextYear = currentYear;

            if (nextQuarter > 4) {
              nextQuarter = 1;
              nextYear += 1;
            }

            // Calculate due date (end of quarter)
            const quarterEndMonth = (nextQuarter * 3) - 1;
            const dueDate = new Date(nextYear, quarterEndMonth, 0); // Last day of quarter

            const milestoneTitle = `Q${nextQuarter} ${nextYear}`;
            const milestoneDescription = `Quarterly milestone for Q${nextQuarter} ${nextYear} development goals`;

            try {
              const milestone = await github.rest.issues.createMilestone({
                owner,
                repo,
                title: milestoneTitle,
                description: milestoneDescription,
                due_on: dueDate.toISOString()
              });
              
              console.log(`✅ Created milestone: ${milestoneTitle}`);
              console.log(`Due date: ${dueDate.toDateString()}`);
              
            } catch (error) {
              if (error.status === 422) {
                console.log(`Milestone ${milestoneTitle} already exists`);
              } else {
                throw error;
              }
            }

  milestone-cleanup:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'cleanup'

    steps:
      - name: Clean up completed milestones
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;

            // Get all closed milestones
            const milestones = await github.rest.issues.listMilestones({
              owner,
              repo,
              state: 'closed'
            });

            for (const milestone of milestones.data) {
              // Check if milestone has any open issues
              const issues = await github.rest.issues.listForRepo({
                owner,
                repo,
                milestone: milestone.number,
                state: 'open'
              });
              
              if (issues.data.length > 0) {
                console.log(`⚠️ Milestone "${milestone.title}" is closed but has ${issues.data.length} open issues`);
                
                // Optionally move issues to current milestone
                const openMilestones = await github.rest.issues.listMilestones({
                  owner,
                  repo,
                  state: 'open',
                  sort: 'due_on',
                  direction: 'asc'
                });
                
                if (openMilestones.data.length > 0) {
                  const currentMilestone = openMilestones.data[0];
                  
                  for (const issue of issues.data) {
                    await github.rest.issues.update({
                      owner,
                      repo,
                      issue_number: issue.number,
                      milestone: currentMilestone.number
                    });
                  }
                  
                  console.log(`Moved ${issues.data.length} issues to current milestone: ${currentMilestone.title}`);
                }
              }
            }
